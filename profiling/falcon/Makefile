# This file was automagically generated by mbed.org. For more information,
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

###############################################################################
# Boiler-plate

# cross-platform directory manipulation
ifeq ($(shell echo $$OS),$$OS)
    MAKEDIR = if not exist "$(1)" mkdir "$(1)"
    RM = rmdir /S /Q "$(1)"
else
    MAKEDIR = '$(SHELL)' -c "mkdir -p \"$(1)\""
    RM = '$(SHELL)' -c "rm -rf \"$(1)\""
endif

OBJDIR := BUILD
# Move to the build directory
ifeq (,$(filter $(OBJDIR),$(notdir $(CURDIR))))
.SUFFIXES:
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
MAKETARGET = '$(MAKE)' --no-print-directory -C $(OBJDIR) -f '$(mkfile_path)' \
		'SRCDIR=$(CURDIR)' $(MAKECMDGOALS)
.PHONY: $(OBJDIR) clean
all:
	+@$(call MAKEDIR,$(OBJDIR))
	+@$(MAKETARGET)
$(OBJDIR): all
Makefile : ;
% :: $(OBJDIR) ; :
clean :
	$(call RM,$(OBJDIR))

else

# trick rules into thinking we are in the root, when we are in the bulid dir
VPATH = ..

# Boiler-plate
###############################################################################
# Project settings

PROJECT := FALCON-NUCLEO-F767ZI


# Project settings
###############################################################################
# Objects and Paths

OBJECTS += main.o
# Falcon specific imports
OBJECTS += falcon-20201020/codec.o falcon-20201020/common.o falcon-20201020/falcon.o falcon-20201020/fft.o
OBJECTS += falcon-20201020/fpr.o falcon-20201020/rng.o #falcon-20201020/keygen.o
OBJECTS += falcon-20201020/shake.o falcon-20201020/sign.o falcon-20201020/vrfy.o
#OBJECTS += dilithium-pqm4/ntt.o dilithium-pqm4/packing.o dilithium-pqm4/pointwise_mont.o
#OBJECTS += dilithium-pqm4/poly.o dilithium-pqm4/polyvec.o dilithium-pqm4/rounding.o
#OBJECTS += dilithium-pqm4/sign.o dilithium-pqm4/symmetric-shake.o dilithium-pqm4/vector.o
#OBJECTS += dilithium-pqm4/fips202.o dilithium-pqm4/keccakf1600.o
INCLUDE_PATHS += -I../falcon-20201020/
#INCLUDE_PATHS += -I../dilithium-pqm4/

SYS_OBJECTS += ../mbed/TARGET_NUCLEO_F767ZI/TOOLCHAIN_GCC_ARM/*.o

INCLUDE_PATHS += -I../.
INCLUDE_PATHS += -I..//usr/src/mbed-sdk
INCLUDE_PATHS += -I../mbed
INCLUDE_PATHS += -I../mbed/TARGET_NUCLEO_F767ZI/TOOLCHAIN_GCC_ARM
INCLUDE_PATHS += -I../mbed/drivers
INCLUDE_PATHS += -I../mbed/hal
INCLUDE_PATHS += -I../mbed/platform

LIBRARY_PATHS := -L../mbed/TARGET_NUCLEO_F767ZI/TOOLCHAIN_GCC_ARM
LIBRARIES := -lmbed
LINKER_SCRIPT ?= ../mbed/TARGET_NUCLEO_F767ZI/TOOLCHAIN_GCC_ARM/STM32F767xI.ld

# Objects and Paths
###############################################################################
# Tools and Flags

AS      = arm-none-eabi-gcc
CC      = arm-none-eabi-gcc
CPP     = arm-none-eabi-g++
LD      = arm-none-eabi-gcc
ELF2BIN = arm-none-eabi-objcopy

TARGET_ARCH = -mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -march=armv7e-m+fpv5+fp.dp -mfloat-abi=softfp
#-mcpu=cortex-m7 -mthumb -mfpu=fpv5-d16 -march=armv7e-m+fpv5+fp.dp #-mfloat-abi=softfp
#-march=armv8.1-m.main+mve.fp+fp.dp -mfpu=fpv5-d16 -mfloat-abi=hard

C_DEFS += -O2 -fomit-frame-pointer -fsanitize-address-use-after-scope
C_DEFS += -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
C_DEFS += -fmessage-length=0 -fno-exceptions -ffunction-sections -fdata-sections
C_DEFS += -funsigned-char -MMD -fno-delete-null-pointer-checks

# See config.h for a description of these
FALCON_FLAGS += -DFALCON_LE -DFALCON_FPNATIVE 

C_FLAGS += -std=gnu11
C_FLAGS += -include mbed_config.h
C_FLAGS += $(TARGET_ARCH) $(C_DEFS)
C_FLAGS += -DUSE_FULL_LL_DRIVER
C_FLAGS += -DDEVICE_ANALOGIN=1
C_FLAGS += -DDEVICE_FLASH=1
C_FLAGS += -D__CORTEX_M7
C_FLAGS += -DTARGET_NUCLEO_F767ZI
C_FLAGS += -DARM_MATH_CM7
C_FLAGS += -DTARGET_STM32F767ZI
C_FLAGS += -DDEVICE_I2C=1
C_FLAGS += -DDEVICE_RESET_REASON=1
C_FLAGS += -DDEVICE_USTICKER=1
C_FLAGS += -DCOMPONENT_FLASHIAP=1
C_FLAGS += -D__CMSIS_RTOS
C_FLAGS += -DDEVICE_SERIAL=1
C_FLAGS += -DDEVICE_RTC=1
C_FLAGS += -DDEVICE_SLEEP=1
C_FLAGS += -DTARGET_STM32F767xI
C_FLAGS += -DMBED_TICKLESS
C_FLAGS += -DSTM32F767xx
C_FLAGS += -DCOMPONENT_NSPE=1
C_FLAGS += -DDEVICE_SERIAL_FC=1
C_FLAGS += -DEXTRA_IDLE_STACK_REQUIRED
C_FLAGS += -D__MBED_CMSIS_RTOS_CM
C_FLAGS += -DTARGET_LIKE_MBED
C_FLAGS += -DUSE_HAL_DRIVER
C_FLAGS += -DDEVICE_I2C_ASYNCH=1
C_FLAGS += -DTARGET_RELEASE
C_FLAGS += -DDEVICE_SPI_ASYNCH=1
C_FLAGS += -DDEVICE_WATCHDOG=1
C_FLAGS += -DDEVICE_SERIAL_ASYNCH=1
C_FLAGS += -DTARGET_FAMILY_STM32
C_FLAGS += -DCOMPONENT_PSA_SRV_EMUL=1
C_FLAGS += -DDEVICE_INTERRUPTIN=1
C_FLAGS += -DTARGET_STM32F7
C_FLAGS += -DDEVICE_MPU=1
C_FLAGS += -DTOOLCHAIN_GCC_ARM
C_FLAGS += -DTARGET_CORTEX_M
C_FLAGS += -DTARGET_M7
C_FLAGS += -DTARGET_CORTEX
C_FLAGS += -D__MBED__=1
C_FLAGS += -DDEVICE_STDIO_MESSAGES=1
C_FLAGS += -DDEVICE_SPISLAVE=1
C_FLAGS += -DDEVICE_CAN=1
C_FLAGS += -DTARGET_NAME=NUCLEO_F767ZI
C_FLAGS += -DDEVICE_TRNG=1
C_FLAGS += -DDEVICE_PWMOUT=1
C_FLAGS += -DDEVICE_PORTIN=1
C_FLAGS += -DTARGET_FF_ARDUINO
C_FLAGS += -DDEVICE_CRC=1
C_FLAGS += -DDEVICE_EMAC=1
C_FLAGS += -DDEVICE_PORTOUT=1
C_FLAGS += -DDEVICE_I2CSLAVE=1
C_FLAGS += -DTARGET_LIKE_CORTEX_M7
C_FLAGS += -DTARGET_STM
C_FLAGS += -DDEVICE_ANALOGOUT=1
C_FLAGS += -DTOOLCHAIN_GCC
C_FLAGS += -DDEVICE_LPTICKER=1
C_FLAGS += -DDEVICE_USBDEVICE=1
C_FLAGS += -DTARGET_RTOS_M4_M7
C_FLAGS += -DDEVICE_PORTINOUT=1
C_FLAGS += -D__FPU_PRESENT=1
C_FLAGS += -DCOMPONENT_PSA_SRV_IMPL=1
C_FLAGS += -DTRANSACTION_QUEUE_SIZE_SPI=2
C_FLAGS += -DDEVICE_SPI=1
C_FLAGS += $(FALCON_FLAGS)

CXX_FLAGS += -std=gnu++14
CXX_FLAGS += -include mbed_config.h
CXX_FLAGS += -fno-rtti -Wvla
CXX_FLAGS += $(TARGET_ARCH) $(C_DEFS)
CXX_FLAGS += -DUSE_FULL_LL_DRIVER
CXX_FLAGS += -DDEVICE_ANALOGIN=1
CXX_FLAGS += -DDEVICE_FLASH=1
CXX_FLAGS += -D__CORTEX_M7
CXX_FLAGS += -DTARGET_NUCLEO_F767ZI
CXX_FLAGS += -DARM_MATH_CM7
CXX_FLAGS += -DTARGET_STM32F767ZI
CXX_FLAGS += -DDEVICE_I2C=1
CXX_FLAGS += -DDEVICE_RESET_REASON=1
CXX_FLAGS += -DDEVICE_USTICKER=1
CXX_FLAGS += -DCOMPONENT_FLASHIAP=1
CXX_FLAGS += -D__CMSIS_RTOS
CXX_FLAGS += -DDEVICE_SERIAL=1
CXX_FLAGS += -DDEVICE_RTC=1
CXX_FLAGS += -DDEVICE_SLEEP=1
CXX_FLAGS += -DTARGET_STM32F767xI
CXX_FLAGS += -DMBED_TICKLESS
CXX_FLAGS += -DSTM32F767xx
CXX_FLAGS += -DCOMPONENT_NSPE=1
CXX_FLAGS += -DDEVICE_SERIAL_FC=1
CXX_FLAGS += -DEXTRA_IDLE_STACK_REQUIRED
CXX_FLAGS += -D__MBED_CMSIS_RTOS_CM
CXX_FLAGS += -DTARGET_LIKE_MBED
CXX_FLAGS += -DUSE_HAL_DRIVER
CXX_FLAGS += -DDEVICE_I2C_ASYNCH=1
CXX_FLAGS += -DTARGET_RELEASE
CXX_FLAGS += -DDEVICE_SPI_ASYNCH=1
CXX_FLAGS += -DDEVICE_WATCHDOG=1
CXX_FLAGS += -DDEVICE_SERIAL_ASYNCH=1
CXX_FLAGS += -DTARGET_FAMILY_STM32
CXX_FLAGS += -DCOMPONENT_PSA_SRV_EMUL=1
CXX_FLAGS += -DDEVICE_INTERRUPTIN=1
CXX_FLAGS += -DTARGET_STM32F7
CXX_FLAGS += -DDEVICE_MPU=1
CXX_FLAGS += -DTOOLCHAIN_GCC_ARM
CXX_FLAGS += -DTARGET_CORTEX_M
CXX_FLAGS += -DTARGET_M7
CXX_FLAGS += -DTARGET_CORTEX
CXX_FLAGS += -D__MBED__=1
CXX_FLAGS += -DDEVICE_STDIO_MESSAGES=1
CXX_FLAGS += -DDEVICE_SPISLAVE=1
CXX_FLAGS += -DDEVICE_CAN=1
CXX_FLAGS += -DTARGET_NAME=NUCLEO_F767ZI
CXX_FLAGS += -DDEVICE_TRNG=1
CXX_FLAGS += -DDEVICE_PWMOUT=1
CXX_FLAGS += -DDEVICE_PORTIN=1
CXX_FLAGS += -DTARGET_FF_ARDUINO
CXX_FLAGS += -DDEVICE_CRC=1
CXX_FLAGS += -DDEVICE_EMAC=1
CXX_FLAGS += -DDEVICE_PORTOUT=1
CXX_FLAGS += -DDEVICE_I2CSLAVE=1
CXX_FLAGS += -DTARGET_LIKE_CORTEX_M7
CXX_FLAGS += -DTARGET_STM
CXX_FLAGS += -DDEVICE_ANALOGOUT=1
CXX_FLAGS += -DTOOLCHAIN_GCC
CXX_FLAGS += -DDEVICE_LPTICKER=1
CXX_FLAGS += -DDEVICE_USBDEVICE=1
CXX_FLAGS += -DTARGET_RTOS_M4_M7
CXX_FLAGS += -DDEVICE_PORTINOUT=1
CXX_FLAGS += -D__FPU_PRESENT=1
CXX_FLAGS += -DCOMPONENT_PSA_SRV_IMPL=1
CXX_FLAGS += -DTRANSACTION_QUEUE_SIZE_SPI=2
CXX_FLAGS += -DDEVICE_SPI=1
CXX_FLAGS += $(FALCON_FLAGS)

ASM_FLAGS += -include mbed_config.h
ASM_FLAGS += -x assembler-with-cpp
ASM_FLAGS += $(TARGET_ARCH) $(C_DEFS) $(INCLUDE_PATHS)
ASM_FLAGS += -DUSE_FULL_LL_DRIVER
ASM_FLAGS += -D__CMSIS_RTOS
ASM_FLAGS += -DMBED_TICKLESS
ASM_FLAGS += -D__CORTEX_M7
ASM_FLAGS += -DSTM32F767xx
ASM_FLAGS += -D__FPU_PRESENT=1
ASM_FLAGS += -DARM_MATH_CM7
ASM_FLAGS += -DEXTRA_IDLE_STACK_REQUIRED
ASM_FLAGS += -D__MBED_CMSIS_RTOS_CM
ASM_FLAGS += -DTRANSACTION_QUEUE_SIZE_SPI=2
ASM_FLAGS += -DUSE_HAL_DRIVER
ASM_FLAGS += $(FALCON_FLAGS)

LD_FLAGS := -Wl,--gc-sections -Wl,--wrap,main -Wl,--wrap,_malloc_r -Wl,--wrap,_free_r -Wl,--wrap,_realloc_r -Wl,--wrap,_memalign_r -Wl,--wrap,_calloc_r -Wl,--wrap,exit -Wl,--wrap,atexit -Wl,-n $(TARGET_ARCH) -DXIP_ENABLE=0
LD_SYS_LIBS :=-Wl,--start-group -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys -lmbed -Wl,--end-group

# Tools and Flags
###############################################################################
# Rules

.PHONY: all lst size

all: $(PROJECT).bin $(PROJECT).hex size

.s.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Assemble: $(notdir $<)"

	@$(AS) -c $(ASM_FLAGS) -o $@ $<

.S.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Assemble: $(notdir $<)"

	@$(AS) -c $(ASM_FLAGS) -o $@ $<

.c.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Compile: $(notdir $<)"
	@$(CC) $(C_FLAGS) $(INCLUDE_PATHS) -c -o $@ $<

.cpp.o:
	+@$(call MAKEDIR,$(dir $@))
	+@echo "Compile: $(notdir $<)"
	@$(CPP) $(CXX_FLAGS) $(INCLUDE_PATHS) -c -o $@ $<

$(PROJECT).link_script.ld: $(LINKER_SCRIPT)
	cp $(LINKER_SCRIPT) $(PROJECT).link_script.ld

$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS) $(PROJECT).link_script.ld
	+@echo "$(filter %.o, $^)" > .link_options.txt
	+@echo "link: $(notdir $@)"
	@$(LD) $(LD_FLAGS) -T $(filter-out %.o, $^) $(LIBRARY_PATHS) --output $@ @.link_options.txt $(LIBRARIES) $(LD_SYS_LIBS)

$(PROJECT).bin: $(PROJECT).elf
	$(ELF2BIN) -O binary $< $@
	+@echo "===== bin file ready to flash: $(OBJDIR)/$@ ====="

$(PROJECT).hex: $(PROJECT).elf
	$(ELF2BIN) -O ihex $< $@

flash: $(PROJECT).hex
	st-flash --format ihex write ../$(OBJDIR)/$(PROJECT).hex

# Rules
###############################################################################
# Dependencies

DEPS = $(OBJECTS:.o=.d) $(SYS_OBJECTS:.o=.d)
-include $(DEPS)
endif

# Dependencies
###############################################################################
# Catch-all

%: ;

# Catch-all
###############################################################################
